# -*- coding: utf-8 -*-
"""Assignment6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FlKchWQY1sPuV0Nqzow-A3USp6yAygh1
"""



"""Apply Linear, Ridge, Lasso Regression technique of machine learning to analyze and
build the model of the Diabetes dataset.
Display and compare the accuracy (Cross-Validation, R2 Score) of all the models.

# **Linear Regression - SKLearn Diabetes Dataset**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd  
import numpy as np   
import sklearn       
import seaborn as sns 
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt 

# %matplotlib inline

from sklearn import datasets
diabetes = datasets.load_diabetes()

diabetes.feature_names

diabetes.data.shape

diabetes.target.shape

db_df = pd.DataFrame(diabetes.data,columns=diabetes.feature_names)

db_df.sample(5)

db_df['Progression'] = diabetes.target

db_df.sample(2)

db_df.isna().sum()

"""There are no missing values in the dataframe"""

db_df.describe()

db_df.info()

"""**Let us check the Linear correlation between the variables in the dataframe**"""

corr = db_df.corr()
corr

"""**1) Create Features & Target.**


"""

x = db_df.drop(labels='Progression', axis=1) 
y = db_df['Progression']

"""**2) Create a train test split here**"""

#splitting the dataset into 75%-25% train-test split 
train_x, test_x, train_y, test_y = train_test_split(x,y,test_size=0.25,random_state=999)
print(train_x.shape)
print(test_x.shape)
print(train_y.shape)
print(test_y.shape)

"""**Ridge Model**"""

from sklearn.linear_model import Ridge
from sklearn.model_selection import cross_val_score,KFold

rg = Ridge(alpha=1.0)
rg.fit(train_x, train_y)
predicted_y_rg = rg.predict(test_x)
rgscore=r2_score(test_y, predicted_y_rg)

kf=KFold(n_splits=5)
rg = Ridge(alpha=1.0)
rgcvscore=cross_val_score(rg,train_x, train_y,cv=kf)



"""**Lasso Model**"""

from sklearn.linear_model import Lasso
from sklearn.metrics import r2_score
ls = Lasso(alpha=1.0)
ls.fit(train_x, train_y)
predicted_y_ls = ls.predict(test_x)
lsscore=r2_score(test_y, predicted_y_ls)


kf=KFold(n_splits=5)
ls = Lasso(alpha=1.0)
lscvscore=cross_val_score(ls,train_x, train_y,cv=kf)

"""**Linear Model**"""

from sklearn.linear_model import LinearRegression
lm = LinearRegression()
lm.fit(train_x, train_y)
predicted_y_lm = lm.predict(test_x)
lmscore=r2_score(test_y, predicted_y_lm)

kf=KFold(n_splits=5)
lm = LinearRegression()
lmcvscore=cross_val_score(lm,train_x, train_y,cv=kf)

print("Accuracies(R2 Scores): ")
print("Ridge: ",rgscore)
print("Lasso: ",lsscore)
print("Linear Regression: ",lmscore)

print("Accuracies(Cross validation score): ")
print("Ridge: ",rgcvscore)
print("Lasso: ",lscvscore)
print("Linear Regression: ",lmcvscore)

